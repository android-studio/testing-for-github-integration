package com.jg.videonotebook.dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table VIDEO_NOTES.
 */
public class VideoNote {

    private Long id;
    private java.util.Date date;
    private String comments;
    private String videoUri;
    private long notebookId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient VideoNoteDao myDao;

    private Notebook notebook;
    private Long notebook__resolvedKey;


    public VideoNote() {
    }

    public VideoNote(Long id) {
        this.id = id;
    }

    public VideoNote(Long id, java.util.Date date, String comments, String videoUri, long notebookId) {
        this.id = id;
        this.date = date;
        this.comments = comments;
        this.videoUri = videoUri;
        this.notebookId = notebookId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getVideoNoteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    public String getVideoUri() {
        return videoUri;
    }

    public void setVideoUri(String videoUri) {
        this.videoUri = videoUri;
    }

    public long getNotebookId() {
        return notebookId;
    }

    public void setNotebookId(long notebookId) {
        this.notebookId = notebookId;
    }

    /** To-one relationship, resolved on first access. */
    public Notebook getNotebook() {
        long __key = this.notebookId;
        if (notebook__resolvedKey == null || !notebook__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NotebookDao targetDao = daoSession.getNotebookDao();
            Notebook notebookNew = targetDao.load(__key);
            synchronized (this) {
                notebook = notebookNew;
            	notebook__resolvedKey = __key;
            }
        }
        return notebook;
    }

    public void setNotebook(Notebook notebook) {
        if (notebook == null) {
            throw new DaoException("To-one property 'notebookId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.notebook = notebook;
            notebookId = notebook.getId();
            notebook__resolvedKey = notebookId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
